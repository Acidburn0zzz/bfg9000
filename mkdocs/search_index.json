{
    "docs": [
        {
            "location": "/", 
            "text": "bfg9000\n\n\nbfg9000\n (\n\"build file generator\"\n) is a cross-platform \nbuild configuration\nsystem\n with an emphasis on making it easy to define how to build your software.\nIt converts a Python-based build script into the appropriate files for your\nunderlying build system of choice.\n\n\nA brief example\n\n\nYou can't get much simpler than the simplest \nbuild.bfg\n file:\n\n\nexecutable('simple', files=['simple.cpp'])\n\n\n\n\nTo build this executable, we need to create the actual build files and then\nrun them:\n\n\n$ bfg9000 path/to/src/ build/\n$ cd build\n$ ninja\n\n\n\n\nFrom there, you can run your newly-created executable: \n./simple\n. Hooray!\n\n\nFor further examples, please see the\n\nexamples/\n\nsubdirectory.\n\n\nInstallation\n\n\nbfg9000 uses \nsetuptools\n, so installation\nis much the same as any other Python package. Just run:\n\n\n$ python setup.py install\n\n\n\n\nFrom there, you can start using bfg to build your software!", 
            "title": "Home"
        }, 
        {
            "location": "/#bfg9000", 
            "text": "bfg9000  ( \"build file generator\" ) is a cross-platform  build configuration\nsystem  with an emphasis on making it easy to define how to build your software.\nIt converts a Python-based build script into the appropriate files for your\nunderlying build system of choice.", 
            "title": "bfg9000"
        }, 
        {
            "location": "/#a-brief-example", 
            "text": "You can't get much simpler than the simplest  build.bfg  file:  executable('simple', files=['simple.cpp'])  To build this executable, we need to create the actual build files and then\nrun them:  $ bfg9000 path/to/src/ build/\n$ cd build\n$ ninja  From there, you can run your newly-created executable:  ./simple . Hooray!  For further examples, please see the examples/ \nsubdirectory.", 
            "title": "A brief example"
        }, 
        {
            "location": "/#installation", 
            "text": "bfg9000 uses  setuptools , so installation\nis much the same as any other Python package. Just run:  $ python setup.py install  From there, you can start using bfg to build your software!", 
            "title": "Installation"
        }, 
        {
            "location": "/building/", 
            "text": "Building With bfg9000\n\n\nLike some other tools (e.g. \nCMake\n or\n\nautotools\n), bfg9000 isn't actually a\nbuild system; it's a \nbuild configuration system\n or, if you prefer, a\n\nmeta-build system\n. That is, bfg9000 builds build files which you then use to\nrun your actual builds.\n\n\nYour first build\n\n\nInvoking bfg9000 is simple. Assuming you have an existing project that uses\nbfg9000, just call \nbfg9000 srcdir builddir\n and it will generate the final\nbuild script (\nbuild.ninja\n in this case) in \nbuilddir\n to use for\nbuilding your project:\n\n\n$ bfg9000 path/to/src/ build/\n$ cd build\n$ ninja\n\n\n\n\n\n\nNote\n\n\nOn Windows, using bfg9000 requires a bit more care. Since the MSVC tools\naren't in the \nPATH\n by default, you can't just open any command prompt.\nYou need to pick the \ncorrect\n prompt. Thankfully, Visual Studio provides\nStart Menu items such as \"VS2015 Developer Command Prompt\". These add the\nappropiate directories to the \nPATH\n, allowing you to use whichever version\nof the MSVC tools that you'd like.\n\n\n\n\nBuild directories\n\n\nYou might have noticed above that \nbuild.ninja\n was placed in a separate\ndirectory. This is because bfg9000 exclusively uses \nout-of-tree builds\n; that\nis, the build directory must be different from the source directory. While\nslightly more inconvenient for one-off builds (users will have to \ncd\n into\nanother directory to start the build), the benefits are significant. First, it\nensures that cleaning a build is trivial: just remove the build directory.\nSecond, simplifies building in multiple configurations, a very useful feature\nfor development; you can easily have debug and optimized builds sitting\nside-by-side.\n\n\nSetting options\n\n\nMany options for building can be set via the environment. These generally follow\nthe UNIX naming conventions, so you can use \nCFLAGS\n, \nCXXFLAGS\n, and \nCPPFLAGS\n\nfor compilation flags, \nLDFLAGS\n for linker flags, and \nLIBRARY_PATH\n for the\nlist of library search directories.", 
            "title": "Building with bfg9000"
        }, 
        {
            "location": "/building/#building-with-bfg9000", 
            "text": "Like some other tools (e.g.  CMake  or autotools ), bfg9000 isn't actually a\nbuild system; it's a  build configuration system  or, if you prefer, a meta-build system . That is, bfg9000 builds build files which you then use to\nrun your actual builds.", 
            "title": "Building With bfg9000"
        }, 
        {
            "location": "/building/#your-first-build", 
            "text": "Invoking bfg9000 is simple. Assuming you have an existing project that uses\nbfg9000, just call  bfg9000 srcdir builddir  and it will generate the final\nbuild script ( build.ninja  in this case) in  builddir  to use for\nbuilding your project:  $ bfg9000 path/to/src/ build/\n$ cd build\n$ ninja   Note  On Windows, using bfg9000 requires a bit more care. Since the MSVC tools\naren't in the  PATH  by default, you can't just open any command prompt.\nYou need to pick the  correct  prompt. Thankfully, Visual Studio provides\nStart Menu items such as \"VS2015 Developer Command Prompt\". These add the\nappropiate directories to the  PATH , allowing you to use whichever version\nof the MSVC tools that you'd like.", 
            "title": "Your first build"
        }, 
        {
            "location": "/building/#build-directories", 
            "text": "You might have noticed above that  build.ninja  was placed in a separate\ndirectory. This is because bfg9000 exclusively uses  out-of-tree builds ; that\nis, the build directory must be different from the source directory. While\nslightly more inconvenient for one-off builds (users will have to  cd  into\nanother directory to start the build), the benefits are significant. First, it\nensures that cleaning a build is trivial: just remove the build directory.\nSecond, simplifies building in multiple configurations, a very useful feature\nfor development; you can easily have debug and optimized builds sitting\nside-by-side.", 
            "title": "Build directories"
        }, 
        {
            "location": "/building/#setting-options", 
            "text": "Many options for building can be set via the environment. These generally follow\nthe UNIX naming conventions, so you can use  CFLAGS ,  CXXFLAGS , and  CPPFLAGS \nfor compilation flags,  LDFLAGS  for linker flags, and  LIBRARY_PATH  for the\nlist of library search directories.", 
            "title": "Setting options"
        }, 
        {
            "location": "/reference/", 
            "text": "Reference\n\n\nFile types\n\n\nheader(\nname\n)\n\n\nheader_directory(\ndirectory\n)\n\n\nsource_file(\nname\n[, \nlang\n])\n\n\nBuild steps\n\n\n\n\nNote\n\n\nFor build steps which produce an actual file, the exact name of the output\nfile is determined by the platform you're running on. For instance, when\nbuilding an executable file named \"foo\" on Windows, the resulting file will\nbe \nfoo.exe\n.\n\n\n\n\nalias(\nname\n, [\ndeps\n])\n\n\nCreate a build step named \nname\n that performs no actions on its own. Instead,\nit just runs its dependencies listed in \ndeps\n as necessary. This build step is\nuseful for grouping common steps together, e.g. the common \nmake all\n command.\n\n\ncommand(\nname\n, \ncmd\n|\ncmds\n, [\nenvironment\n], [\nextra_deps\n])\n\n\nCreate a build step that runs a list of arbitrary commands, specified in either\n\ncmd\n or \ncmds\n; \ncmd\n takes a single command, whereas \ncmds\n takes a list of\ncommands. Each command may either be a string to be parsed according to shell\nrules or a list of arguments to be passed directly to the process.\n\n\nYou may also pass a dict to \nenvironment\n to set environment variables for the\ncommands. These override any environment variables set on the command line.\n\n\nexecutable(\nname\n, [\nfiles\n, ..., [\nextra_deps\n]])\n\n\nCreate a build step that builds an executable file named \nname\n. \nfiles\n is the\nlist of source (or object) files to link. If an element of \nfiles\n is a source\nfile (or a plain string), this function will implicitly call\n\nobject_file\n on it.\n\n\nThe following arguments may also be specified:\n\n\n\n\ninclude\n: Forwarded on to \nobject_file\n\n\nlibs\n: A list of library files (see \nshared_library\n and \nstatic_library\n)\n\n\npackages\n: A list of external \npackages\n; also forwarded on\n  to \nobject_file\n\n\ncompile_options\n: Forwarded on to\n  \nobject_file\n as \noptions\n\n\nlink_options\n: Command-line options to pass to the linker\n\n\nlang\n: Forwarded on to \nobject_file\n\n\n\n\nIf \nfiles\n isn't specified, this function merely references an \nexisting\n\nexecutable file (a precompiled binary, a shell script, etc) somewhere on the\nfilesystem. In this case, \nname\n is the exact name of the file. This allows\nyou to refer to existing executables for other functions.\n\n\nobject_file([\nname\n], [\nfile\n, ..., [\nextra_deps\n]])\n\n\nCreate a build step that compiles a source file named \nfile\n to an object file\nnamed \nname\n; if \nname\n is not specified, it takes the file name in \nfile\n\nwithout the extension.\n\n\nThe following arguments may also be specified:\n\n\n\n\ninclude\n: A list of \ndirectories\n to search for\n  header files\n\n\npackages\n: A list of external \npackages\n\n\noptions\n: Command-line options to pass to the compiler\n\n\nlang\n: The language of the source file; useful if the source file's extension\n  isn't recognized by bfg9000\n\n\n\n\nIf \nfile\n isn't specified, this function merely references an \nexisting\n\nobject file somewhere on the filesystem. In this case, \nname\n must be specified\nand is the exact name of the file.\n\n\nobject_files(\nfiles\n, ..., [\nextra_deps\n])\n\n\nCreate a compilation build step for each of the files in \nfiles\n; this is\nequivalent to calling \nobject_file\n for each\nelement in \nfiles\n.\n\n\nshared_library(\nname\n, [\nfiles\n, ..., [\nextra_deps\n]])\n\n\nCreate a build step that builds a shared library named \nname\n. Its arguments are\nthe same as \nexecutable\n.\n\n\n\n\nNote\n\n\nOn Windows, this produces \ntwo\n files: \nname.dll\n and \nname.lib\n. The latter\nis the \nimport library\n, used when linking to this library. As a result,\n\nmy_lib.all\n returns a list containing two files.\n\n\n\n\nstatic_library(\nname\n, [\nfiles\n, ..., [\nextra_deps\n]])\n\n\nCreate a build step that builds a static library named \nname\n. Its arguments are\nthe same as \nexecutable\n.\n\n\nOther rules\n\n\ndefault(\n...\n)\n\n\nSpecify a list of build steps that should be run by default when building. These\nare all accumulated into the \n\"all\"\n target.\n\n\nglobal_options(\noptions\n, \nlang\n)\n\n\nglobal_link_options(\noptions\n)\n\n\ninstall(\n...\n, [\nall\n])\n\n\nSpecify a list of files that need to be installed for the project to work. Each\nwill be installed to the appropriate location based on its type (e.g. header\nfiles will go in \n$PREFIX/include\n by default on POSIX systems).\n\n\nIf \nall\n is \nTrue\n, all the files will be installed; otherwise, only the primary\nfile for each argument will be. For instance, on Windows, this means that\nsetting \nall\n to \nTrue\n installs the import libraries as well as the DLLs for\nshared libraries.\n\n\ntest(\ntest\n, [\noptions\n], [\nenvironment\n], [\ndriver\n])\n\n\ntest_driver(\ndriver\n, [\noptions\n], [\nenvironment\n], [\nparent\n])\n\n\ntest_deps(\n...\n)\n\n\nPackage finders\n\n\nboost_package([\nname\n], [\nversion\n])\n\n\nsystem_executable(\nname\n)\n\n\nsystem_package(\nname\n)\n\n\nMiscellaneous\n\n\nbfg9000_required_version([\nversion\n], [\npython_version\n])\n\n\nfilter_by_platform(\nname\n, \ntype\n)\n\n\nfind_files([\npath\n], [\nname\n], [\ntype\n], [\nflat\n], [\nfilter\n], [\ncache\n])", 
            "title": "Reference"
        }, 
        {
            "location": "/reference/#reference", 
            "text": "", 
            "title": "Reference"
        }, 
        {
            "location": "/reference/#file-types", 
            "text": "", 
            "title": "File types"
        }, 
        {
            "location": "/reference/#headername", 
            "text": "", 
            "title": "header(name)"
        }, 
        {
            "location": "/reference/#header_directorydirectory", 
            "text": "", 
            "title": "header_directory(directory)"
        }, 
        {
            "location": "/reference/#source_filename-lang", 
            "text": "", 
            "title": "source_file(name[, lang])"
        }, 
        {
            "location": "/reference/#build-steps", 
            "text": "Note  For build steps which produce an actual file, the exact name of the output\nfile is determined by the platform you're running on. For instance, when\nbuilding an executable file named \"foo\" on Windows, the resulting file will\nbe  foo.exe .", 
            "title": "Build steps"
        }, 
        {
            "location": "/reference/#aliasname-deps", 
            "text": "Create a build step named  name  that performs no actions on its own. Instead,\nit just runs its dependencies listed in  deps  as necessary. This build step is\nuseful for grouping common steps together, e.g. the common  make all  command.", 
            "title": "alias(name, [deps])"
        }, 
        {
            "location": "/reference/#commandname-cmdcmds-environment-extra_deps", 
            "text": "Create a build step that runs a list of arbitrary commands, specified in either cmd  or  cmds ;  cmd  takes a single command, whereas  cmds  takes a list of\ncommands. Each command may either be a string to be parsed according to shell\nrules or a list of arguments to be passed directly to the process.  You may also pass a dict to  environment  to set environment variables for the\ncommands. These override any environment variables set on the command line.", 
            "title": "command(name, cmd|cmds, [environment], [extra_deps])"
        }, 
        {
            "location": "/reference/#executablename-files-extra_deps", 
            "text": "Create a build step that builds an executable file named  name .  files  is the\nlist of source (or object) files to link. If an element of  files  is a source\nfile (or a plain string), this function will implicitly call object_file  on it.  The following arguments may also be specified:   include : Forwarded on to  object_file  libs : A list of library files (see  shared_library  and  static_library )  packages : A list of external  packages ; also forwarded on\n  to  object_file  compile_options : Forwarded on to\n   object_file  as  options  link_options : Command-line options to pass to the linker  lang : Forwarded on to  object_file   If  files  isn't specified, this function merely references an  existing \nexecutable file (a precompiled binary, a shell script, etc) somewhere on the\nfilesystem. In this case,  name  is the exact name of the file. This allows\nyou to refer to existing executables for other functions.", 
            "title": "executable(name, [files, ..., [extra_deps]])"
        }, 
        {
            "location": "/reference/#object_filename-file-extra_deps", 
            "text": "Create a build step that compiles a source file named  file  to an object file\nnamed  name ; if  name  is not specified, it takes the file name in  file \nwithout the extension.  The following arguments may also be specified:   include : A list of  directories  to search for\n  header files  packages : A list of external  packages  options : Command-line options to pass to the compiler  lang : The language of the source file; useful if the source file's extension\n  isn't recognized by bfg9000   If  file  isn't specified, this function merely references an  existing \nobject file somewhere on the filesystem. In this case,  name  must be specified\nand is the exact name of the file.", 
            "title": "object_file([name], [file, ..., [extra_deps]])"
        }, 
        {
            "location": "/reference/#object_filesfiles-extra_deps", 
            "text": "Create a compilation build step for each of the files in  files ; this is\nequivalent to calling  object_file  for each\nelement in  files .", 
            "title": "object_files(files, ..., [extra_deps])"
        }, 
        {
            "location": "/reference/#shared_libraryname-files-extra_deps", 
            "text": "Create a build step that builds a shared library named  name . Its arguments are\nthe same as  executable .   Note  On Windows, this produces  two  files:  name.dll  and  name.lib . The latter\nis the  import library , used when linking to this library. As a result, my_lib.all  returns a list containing two files.", 
            "title": "shared_library(name, [files, ..., [extra_deps]])"
        }, 
        {
            "location": "/reference/#static_libraryname-files-extra_deps", 
            "text": "Create a build step that builds a static library named  name . Its arguments are\nthe same as  executable .", 
            "title": "static_library(name, [files, ..., [extra_deps]])"
        }, 
        {
            "location": "/reference/#other-rules", 
            "text": "", 
            "title": "Other rules"
        }, 
        {
            "location": "/reference/#default", 
            "text": "Specify a list of build steps that should be run by default when building. These\nare all accumulated into the  \"all\"  target.", 
            "title": "default(...)"
        }, 
        {
            "location": "/reference/#global_optionsoptions-lang", 
            "text": "", 
            "title": "global_options(options, lang)"
        }, 
        {
            "location": "/reference/#global_link_optionsoptions", 
            "text": "", 
            "title": "global_link_options(options)"
        }, 
        {
            "location": "/reference/#install-all", 
            "text": "Specify a list of files that need to be installed for the project to work. Each\nwill be installed to the appropriate location based on its type (e.g. header\nfiles will go in  $PREFIX/include  by default on POSIX systems).  If  all  is  True , all the files will be installed; otherwise, only the primary\nfile for each argument will be. For instance, on Windows, this means that\nsetting  all  to  True  installs the import libraries as well as the DLLs for\nshared libraries.", 
            "title": "install(..., [all])"
        }, 
        {
            "location": "/reference/#testtest-options-environment-driver", 
            "text": "", 
            "title": "test(test, [options], [environment], [driver])"
        }, 
        {
            "location": "/reference/#test_driverdriver-options-environment-parent", 
            "text": "", 
            "title": "test_driver(driver, [options], [environment], [parent])"
        }, 
        {
            "location": "/reference/#test_deps", 
            "text": "", 
            "title": "test_deps(...)"
        }, 
        {
            "location": "/reference/#package-finders", 
            "text": "", 
            "title": "Package finders"
        }, 
        {
            "location": "/reference/#boost_packagename-version", 
            "text": "", 
            "title": "boost_package([name], [version])"
        }, 
        {
            "location": "/reference/#system_executablename", 
            "text": "", 
            "title": "system_executable(name)"
        }, 
        {
            "location": "/reference/#system_packagename", 
            "text": "", 
            "title": "system_package(name)"
        }, 
        {
            "location": "/reference/#miscellaneous", 
            "text": "", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/reference/#bfg9000_required_versionversion-python_version", 
            "text": "", 
            "title": "bfg9000_required_version([version], [python_version])"
        }, 
        {
            "location": "/reference/#filter_by_platformname-type", 
            "text": "", 
            "title": "filter_by_platform(name, type)"
        }, 
        {
            "location": "/reference/#find_filespath-name-type-flat-filter-cache", 
            "text": "", 
            "title": "find_files([path], [name], [type], [flat], [filter], [cache])"
        }, 
        {
            "location": "/developer/", 
            "text": "Developer Documentation\n\n\nAt its core, a build file is just a DAG (directed acyclic graph) that gets\nwalked through by the build system, where the nodes are files and the edges are\nbuild steps. A bfg9000 build file is no different.\n\n\nHow a build.bfg file is compiled\n\n\nSnapshot the environment\n\n\nWhen bfg9000 is invoked, it first takes a snapshot of the current environment\n(the operating system, environment variables, compiler to use, etc). This is\nimportant to provide a stable state for regeneration of the build file if\nnecessary (e.g. if build.bfg is changed).\n\n\nBuild an internal dependency graph\n\n\nNext, it executes the build.bfg file. Most bfg9000 functions represent build\nsteps or other related parts of the dependency graph. When called, these build\nup an internal DAG structure with all the backend-agnostic data filled in (e.g.\nvirtual filenames are resolved to real ones, such as \"foo\" to \"libfoo.so\").\n\n\nEmit the final build file\n\n\nOnce this is complete, the DAG is passed to the appropriate backend, which\niterates over all the known edges (build steps) and emits the backend-specific\ncode for them. Since all the backends handle walking the DAG on their own,\nbfg9000 can safely avoid worrying about trying to do this efficiently in Python.", 
            "title": "Developer Guide"
        }, 
        {
            "location": "/developer/#developer-documentation", 
            "text": "At its core, a build file is just a DAG (directed acyclic graph) that gets\nwalked through by the build system, where the nodes are files and the edges are\nbuild steps. A bfg9000 build file is no different.", 
            "title": "Developer Documentation"
        }, 
        {
            "location": "/developer/#how-a-buildbfg-file-is-compiled", 
            "text": "", 
            "title": "How a build.bfg file is compiled"
        }, 
        {
            "location": "/developer/#snapshot-the-environment", 
            "text": "When bfg9000 is invoked, it first takes a snapshot of the current environment\n(the operating system, environment variables, compiler to use, etc). This is\nimportant to provide a stable state for regeneration of the build file if\nnecessary (e.g. if build.bfg is changed).", 
            "title": "Snapshot the environment"
        }, 
        {
            "location": "/developer/#build-an-internal-dependency-graph", 
            "text": "Next, it executes the build.bfg file. Most bfg9000 functions represent build\nsteps or other related parts of the dependency graph. When called, these build\nup an internal DAG structure with all the backend-agnostic data filled in (e.g.\nvirtual filenames are resolved to real ones, such as \"foo\" to \"libfoo.so\").", 
            "title": "Build an internal dependency graph"
        }, 
        {
            "location": "/developer/#emit-the-final-build-file", 
            "text": "Once this is complete, the DAG is passed to the appropriate backend, which\niterates over all the known edges (build steps) and emits the backend-specific\ncode for them. Since all the backends handle walking the DAG on their own,\nbfg9000 can safely avoid worrying about trying to do this efficiently in Python.", 
            "title": "Emit the final build file"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\nBSD 3-clause license\n\n\nCopyright (c) 2015, Jim Porter\nAll rights reserved.\n\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n\n\n\n\n\nRedistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n\n\n\n\n\nRedistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n\n\n\n\n\nNeither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\n\n\n\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "", 
            "title": "License"
        }, 
        {
            "location": "/license/#bsd-3-clause-license", 
            "text": "Copyright (c) 2015, Jim Porter\nAll rights reserved.  Redistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:    Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.    Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.    Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "BSD 3-clause license"
        }
    ]
}