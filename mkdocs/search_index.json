{
    "docs": [
        {
            "location": "/", 
            "text": "bfg9000\n\n\nbfg9000\n (\n\"build file generator\"\n) is a cross-platform \nbuild configuration\nsystem\n with an emphasis on making it easy to define how to build your software.\nIt converts a Python-based build script into the appropriate files for your\nunderlying build system of choice.\n\n\nA brief example\n\n\nYou can't get much simpler than the simplest \nbuild.bfg\n file:\n\n\nexecutable('simple', files=['simple.cpp'])\n\n\n\n\nTo build this executable, we need to create the actual build files and then\nrun them:\n\n\n$ bfg9000 path/to/src/ build/\n$ cd build\n$ ninja\n\n\n\n\nFrom there, you can run your newly-created executable: \n./simple\n. Hooray!\n\n\nFor further examples, please see the\n\nexamples/\n\nsubdirectory.\n\n\nInstallation\n\n\nbfg9000 uses \nsetuptools\n, so installation\nis much the same as any other Python package. Just run:\n\n\n$ python setup.py install\n\n\n\n\nFrom there, you can start using bfg to build your software!\n\n\n\n\nNote\n\n\nSince many users don't need it, MSBuild support is an optional feature.\nTo install all the dependencies required for MSBuild, you can run:\n\n\n$ pip install -e .[msbuild]", 
            "title": "Home"
        }, 
        {
            "location": "/#bfg9000", 
            "text": "bfg9000  ( \"build file generator\" ) is a cross-platform  build configuration\nsystem  with an emphasis on making it easy to define how to build your software.\nIt converts a Python-based build script into the appropriate files for your\nunderlying build system of choice.", 
            "title": "bfg9000"
        }, 
        {
            "location": "/#a-brief-example", 
            "text": "You can't get much simpler than the simplest  build.bfg  file:  executable('simple', files=['simple.cpp'])  To build this executable, we need to create the actual build files and then\nrun them:  $ bfg9000 path/to/src/ build/\n$ cd build\n$ ninja  From there, you can run your newly-created executable:  ./simple . Hooray!  For further examples, please see the examples/ \nsubdirectory.", 
            "title": "A brief example"
        }, 
        {
            "location": "/#installation", 
            "text": "bfg9000 uses  setuptools , so installation\nis much the same as any other Python package. Just run:  $ python setup.py install  From there, you can start using bfg to build your software!   Note  Since many users don't need it, MSBuild support is an optional feature.\nTo install all the dependencies required for MSBuild, you can run:  $ pip install -e .[msbuild]", 
            "title": "Installation"
        }, 
        {
            "location": "/building/", 
            "text": "Building With bfg9000\n\n\nLike some other tools (e.g. \nCMake\n or\n\nautotools\n), bfg9000 isn't actually a\nbuild system; it's a \nbuild configuration system\n or, if you prefer, a\n\nmeta-build system\n. That is, bfg9000 builds build files which you then use to\nrun your actual builds.\n\n\nYour first build\n\n\nInvoking bfg9000 is simple. Assuming you have an existing project that uses\nbfg9000, just call \nbfg9000 srcdir builddir\n and it will generate the final\nbuild script (\nbuild.ninja\n in this case) in \nbuilddir\n to use for\nbuilding your project:\n\n\n$ bfg9000 path/to/src/ build/\n$ cd build\n$ ninja\n\n\n\n\n\n\nNote\n\n\nOn Windows, using bfg9000 requires a bit more care. Since the MSVC tools\naren't in the \nPATH\n by default, you can't just open any command prompt.\nYou need to pick the \ncorrect\n prompt. Thankfully, Visual Studio provides\nStart Menu items such as \"VS2015 Developer Command Prompt\". These add the\nappropiate directories to the \nPATH\n, allowing you to use whichever version\nof the MSVC tools that you'd like.\n\n\n\n\nBuild directories\n\n\nYou might have noticed above that \nbuild.ninja\n was placed in a separate\ndirectory. This is because bfg9000 exclusively uses \nout-of-tree builds\n; that\nis, the build directory must be different from the source directory. While\nslightly more inconvenient for one-off builds (users will have to \ncd\n into\nanother directory to start the build), the benefits are significant. First, it\nensures that cleaning a build is trivial: just remove the build directory.\nSecond, simplifies building in multiple configurations, a very useful feature\nfor development; you can easily have debug and optimized builds sitting\nside-by-side.\n\n\nIn our example above, we explicitly specified both the source and build\ndirectories. However, for convenience, only one of them is required. If you're\nalready in a source directory (i.e. a directory which contains a \nbuild.bfg\n\nfile), then you can simply say \nbfg9000 builddir\n. If you're in a build\ndirectory (i.e. a directory which does \nnot\n contain a \nbuild.bfg\n file), then\nyou can instead say \nbfg9000 srcdir\n.\n\n\nSelecting a backend\n\n\nBy default, bfg9000 tries to use the most appropriate build backend for your\nsystem. In descending order, bfg prefers \nninja\n,\n\nmake\n, and\n\nmsbuild\n.\nIf one of these isn't installed, it will try the next best option. However, you\ncan explicitly select a backend with the \n--backend\n option. For instance, to\nbuild a Makefile even if Ninja is installed:\n\n\n$ bfg9000 --backend make srcdir builddir\n\n\n\n\nSetting options\n\n\nMany options for building can be set via the environment. These generally follow\nthe UNIX naming conventions, so you can use, say,\n\nCXX\n to change the C++ compiler that bfg9000 uses.\nFor a full listing of the recognized environment variables, see the \nEnvironment\nVariables\n chapter.\n\n\nInstalling your software\n\n\nAfter building your software, you may wish to install it to another directory on\nyour system. By default, bfg9000 will install them into the appropriate place\nfor your platform (e.g. \n/usr/local/bin\n for exectuables on POSIX systems).\nHowever, you can specify where you'd like to install your project when invoking\nbfg9000. To change the installation prefix (\n/usr/local\n on POSIX), just specify\n\n--prefix /path/to/prefix\n when running bfg9000. You can also specify the\nbinary, library, and include directories individually, using \n--bindir\n,\n\n--libdir\n, and \n--includedir\n, respectively.", 
            "title": "Building with bfg9000"
        }, 
        {
            "location": "/building/#building-with-bfg9000", 
            "text": "Like some other tools (e.g.  CMake  or autotools ), bfg9000 isn't actually a\nbuild system; it's a  build configuration system  or, if you prefer, a meta-build system . That is, bfg9000 builds build files which you then use to\nrun your actual builds.", 
            "title": "Building With bfg9000"
        }, 
        {
            "location": "/building/#your-first-build", 
            "text": "Invoking bfg9000 is simple. Assuming you have an existing project that uses\nbfg9000, just call  bfg9000 srcdir builddir  and it will generate the final\nbuild script ( build.ninja  in this case) in  builddir  to use for\nbuilding your project:  $ bfg9000 path/to/src/ build/\n$ cd build\n$ ninja   Note  On Windows, using bfg9000 requires a bit more care. Since the MSVC tools\naren't in the  PATH  by default, you can't just open any command prompt.\nYou need to pick the  correct  prompt. Thankfully, Visual Studio provides\nStart Menu items such as \"VS2015 Developer Command Prompt\". These add the\nappropiate directories to the  PATH , allowing you to use whichever version\nof the MSVC tools that you'd like.", 
            "title": "Your first build"
        }, 
        {
            "location": "/building/#build-directories", 
            "text": "You might have noticed above that  build.ninja  was placed in a separate\ndirectory. This is because bfg9000 exclusively uses  out-of-tree builds ; that\nis, the build directory must be different from the source directory. While\nslightly more inconvenient for one-off builds (users will have to  cd  into\nanother directory to start the build), the benefits are significant. First, it\nensures that cleaning a build is trivial: just remove the build directory.\nSecond, simplifies building in multiple configurations, a very useful feature\nfor development; you can easily have debug and optimized builds sitting\nside-by-side.  In our example above, we explicitly specified both the source and build\ndirectories. However, for convenience, only one of them is required. If you're\nalready in a source directory (i.e. a directory which contains a  build.bfg \nfile), then you can simply say  bfg9000 builddir . If you're in a build\ndirectory (i.e. a directory which does  not  contain a  build.bfg  file), then\nyou can instead say  bfg9000 srcdir .", 
            "title": "Build directories"
        }, 
        {
            "location": "/building/#selecting-a-backend", 
            "text": "By default, bfg9000 tries to use the most appropriate build backend for your\nsystem. In descending order, bfg prefers  ninja , make , and msbuild .\nIf one of these isn't installed, it will try the next best option. However, you\ncan explicitly select a backend with the  --backend  option. For instance, to\nbuild a Makefile even if Ninja is installed:  $ bfg9000 --backend make srcdir builddir", 
            "title": "Selecting a backend"
        }, 
        {
            "location": "/building/#setting-options", 
            "text": "Many options for building can be set via the environment. These generally follow\nthe UNIX naming conventions, so you can use, say, CXX  to change the C++ compiler that bfg9000 uses.\nFor a full listing of the recognized environment variables, see the  Environment\nVariables  chapter.", 
            "title": "Setting options"
        }, 
        {
            "location": "/building/#installing-your-software", 
            "text": "After building your software, you may wish to install it to another directory on\nyour system. By default, bfg9000 will install them into the appropriate place\nfor your platform (e.g.  /usr/local/bin  for exectuables on POSIX systems).\nHowever, you can specify where you'd like to install your project when invoking\nbfg9000. To change the installation prefix ( /usr/local  on POSIX), just specify --prefix /path/to/prefix  when running bfg9000. You can also specify the\nbinary, library, and include directories individually, using  --bindir , --libdir , and  --includedir , respectively.", 
            "title": "Installing your software"
        }, 
        {
            "location": "/reference/", 
            "text": "Reference\n\n\nFile types\n\n\nheader(\nname\n)\n\n\nCreate a reference to an existing header named \nname\n. This is useful if you'd\nlike to \ninstall\n a single header file for your project.\n\n\nheader_directory(\ndirectory\n, [\nsystem\n])\n\n\nCreate a reference to a \ndirectory\n containing header files for the project.\nThis can then be used in the \ninclude\n argument when\n\ncompiling\n a source file. If \nsystem\n is\n\nTrue\n, this directory will be treated as a\n\nsystem directory\n for\ncompilers that support this.\n\n\nsource_file(\nname\n, [\nlang\n])\n\n\nCreate a reference to an existing source file named \nname\n. If \nlang\n is not\nspecified, the language of the file is inferred from its extension. Generally,\nthis function is only necessary when running commands that take a source file\nas an argument, e.g. running a Python script; this allows you to specify that\nthe file is found in the \nsource directory\n. In other cases, a plain string will\nautomatically get converted to a \nsource_file\n.\n\n\nwhole_archive(\nname\n)\n\n\nCreate a \nwhole-archive\n from an existing static\nlibrary named \nname\n. This ensure that \nevery\n object file in the library is\nincluded, rather than just the ones whose symbols are referenced. This is\ntypically used to turn a static library into a shared library.\n\n\n\n\nWarning\n\n\nThe MSVC linker doesn't have a way of expressing this directive, so\n\nwhole_archive\n can't be used with it.\n\n\n\n\nBuild steps\n\n\n\n\nNote\n\n\nFor build steps which produce an actual file, the exact name of the output\nfile is determined by the platform you're running on. For instance, when\nbuilding an executable file named \"foo\" on Windows, the resulting file will\nbe \nfoo.exe\n.\n\n\n\n\nalias(\nname\n, [\ndeps\n])\n\n\nCreate a build step named \nname\n that performs no actions on its own. Instead,\nit just runs its dependencies listed in \ndeps\n as necessary. This build step is\nuseful for grouping common steps together, e.g. the common \nmake all\n command.\n\n\ncommand(\nname\n, \ncmd\n|\ncmds\n, [\nenvironment\n], [\nextra_deps\n])\n\n\nCreate a build step that runs a list of arbitrary commands, specified in either\n\ncmd\n or \ncmds\n; \ncmd\n takes a single command, whereas \ncmds\n takes a list of\ncommands. Each command may either be a string to be parsed according to shell\nrules or a list of arguments to be passed directly to the process.\n\n\nYou may also pass a dict to \nenvironment\n to set environment variables for the\ncommands. These override any environment variables set on the command line.\n\n\nexecutable(\nname\n, [\nfiles\n, ..., [\nextra_deps\n]])\n\n\nCreate a build step that builds an executable file named \nname\n. \nfiles\n is the\nlist of source (or object) files to link. If an element of \nfiles\n is a source\nfile (or a plain string), this function will implicitly call\n\nobject_file\n on it.\n\n\nThe following arguments may also be specified:\n\n\n\n\ninclude\n: Forwarded on to \nobject_file\n\n\nlibs\n: A list of library files (see \nshared_library\n and \nstatic_library\n)\n\n\npackages\n: A list of external \npackages\n; also forwarded on\n  to \nobject_file\n\n\ncompile_options\n: Forwarded on to\n  \nobject_file\n as \noptions\n\n\nlink_options\n: Command-line options to pass to the linker\n\n\nlang\n: Forwarded on to \nobject_file\n\n\n\n\nIf \nfiles\n isn't specified, this function merely references an \nexisting\n\nexecutable file (a precompiled binary, a shell script, etc) somewhere on the\nfilesystem. In this case, \nname\n is the exact name of the file. This allows\nyou to refer to existing executables for other functions.\n\n\nThis build step recognizes the following environment variables:\n\nCC\n, \nCC_LINK\n,\n\nCXX\n, \nCXX_LINK\n,\n\nLDFLAGS\n,\n\nLDLIBS\n.\n\n\nobject_file([\nname\n], [\nfile\n, ..., [\nextra_deps\n]])\n\n\nCreate a build step that compiles a source file named \nfile\n to an object file\nnamed \nname\n; if \nname\n is not specified, it takes the file name in \nfile\n\nwithout the extension.\n\n\nThe following arguments may also be specified:\n\n\n\n\ninclude\n: A list of \ndirectories\n to search for\n  header files\n\n\npackages\n: A list of external \npackages\n\n\noptions\n: Command-line options to pass to the compiler\n\n\nlang\n: The language of the source file; useful if the source file's extension\n  isn't recognized by bfg9000\n\n\n\n\nIf \nfile\n isn't specified, this function merely references an \nexisting\n\nobject file somewhere on the filesystem. In this case, \nname\n must be specified\nand is the exact name of the file.\n\n\nThis build step recognizes the following environment variables:\n\nCC\n, \nCFLAGS\n,\n\nCPPFLAGS\n, \nCXX\n,\n\nCXXFLAGS\n,\n\nLDLIBS\n.\n\n\nobject_files(\nfiles\n, ..., [\nextra_deps\n])\n\n\nCreate a compilation build step for each of the files in \nfiles\n; this is\nequivalent to calling \nobject_file\n for each\nelement in \nfiles\n.\n\n\nIn addition, \nobject_files\n returns a special list that allows you to index into\nit using the filename of one of the source files listed in \nfiles\n. This makes\nit easy to extract a single object file to use in other places, e.g. test code.\nFor example:\n\n\nobjs = object_files(['foo.cpp', 'bar.cpp'])\nrelease_exe = executable('release', objs)\n\nfoo_obj = objs['foo.cpp']\ntest_exe = executable('test', ['test.cpp', foo_obj])\n\n\n\n\nshared_library(\nname\n, [\nfiles\n, ..., [\nextra_deps\n]])\n\n\nCreate a build step that builds a shared library named \nname\n. Its arguments are\nthe same as \nexecutable\n.\n\n\nThis build step recognizes the following environment variables:\n\nCC\n, \nCC_LINK\n,\n\nCXX\n, \nCXX_LINK\n,\n\nLDFLAGS\n,\n\nLDLIBS\n.\n\n\n\n\nNote\n\n\nOn Windows, this produces \ntwo\n files: \nname.dll\n and \nname.lib\n. The latter\nis the \nimport library\n, used when linking to this library. As a result,\n\nmy_lib.all\n returns a list containing two files.\n\n\n\n\nstatic_library(\nname\n, [\nfiles\n, ..., [\nextra_deps\n]])\n\n\nCreate a build step that builds a static library named \nname\n. Its arguments are\nthe same as \nexecutable\n.\n\n\nThis build step recognizes the following environment variables:\n\nAR\n, \nARFLAGS\n,\n\nCC_LIB\n,\n\nCXX_LIB\n,\n\nLIBFLAGS\n.\n\n\nGrouping rules\n\n\ndefault(\n...\n)\n\n\nSpecify a list of build steps that should be run by default when building. These\nare all accumulated into the \nall\n target.\n\n\ninstall(\n...\n, [\nall\n])\n\n\nSpecify a list of files that need to be installed for the project to work. Each\nwill be installed to the appropriate location based on its type (e.g. header\nfiles will go in \n$PREFIX/include\n by default on POSIX systems). These are all\naccumulated into the \ninstall\n target.\n\n\nIf \nall\n is \nTrue\n, all the files will be installed; otherwise, only the primary\nfile for each argument will be. For instance, on Windows, this means that\nsetting \nall\n to \nTrue\n installs the import libraries as well as the DLLs for\nshared libraries.\n\n\nThis rule recognizes the following environment variables:\n\nINSTALL\n,\n\nMKDIR_P\n,\n\nPATCHELF\n.\n\n\nGlobal options\n\n\nglobal_options(\noptions\n, \nlang\n)\n\n\nSpecify some \noptions\n (either as a string or list) to use for all compilation\nsteps for the language \nlang\n.\n\n\nglobal_link_options(\noptions\n)\n\n\nSpecify some \noptions\n (either as a string or list) to use for all link steps\n(i.e. for \nexecutables\n and\n\nshared libraries\n).\n\n\nTest rules\n\n\nThese rules help you define automated tests that can all be run via the \ntest\n\ntarget. For simple cases, you should only need the\n\ntest\n rule, but you can also wrap your\ntests with a separate driver using\n\ntest_driver\n.\n\n\nFor cases where you only want to \nbuild\n the tests, not run them, you can use\nthe \ntests\n target.\n\n\ntest(\ntest\n, [\noptions\n], [\nenvironment\n|\ndriver\n])\n\n\nCreate a test for a single test file named \ntest\n. You may specify additional\ncommand-line arguments to the test in \noptions\n. You can also pass temporary\nenvironment variables as a dict via \nenvironment\n, or specify a test driver to\nadd this test file to via \ndriver\n.\n\n\ntest_driver(\ndriver\n, [\noptions\n], [\nenvironment\n|\nparent\n])\n\n\nCreate a test driver which can run a series of tests, specified as command-line\narguments to the driver. You may specify driver-wide command-line arguments via\n\noptions\n. You can also pass temporary environment variables as a dict with\n\nenvironment\n, or specify a parent test driver to wrap this driver via \ndriver\n.\n\n\ntest_deps(\n...\n)\n\n\nSpecify a list of dependencies which must be satisfied before the tests can be\nrun.\n\n\nPackage finders\n\n\nboost_package([\nname\n], [\nversion\n])\n\n\nSearch for a Boost library. You can specify \nname\n (as a string or a list) to\nspecify a specific Boost library (or libraries); for instance,\n\n'program_options'\n. For header-only libraries, you can omit \nname\n.\n\n\nThis rule recognizes the following environment variables:\n\nBOOST_ROOT\n,\n\nBOOST_INCLUDEDIR\n,\n\nBOOST_LIBRARYDIR\n.\n\n\nsystem_executable(\nname\n)\n\n\nSearch for an executable named \nname\n somewhere in the system's PATH.\n\n\nThis rule recognizes the following environment variables:\n\nPATH\n, \nPATHEXT\n.\n\n\nsystem_package(\nname\n, [\nlang\n], [\nkind\n])\n\n\nSearch for a library named \nname\n somewhere in the system's default library\nlocation. \nlang\n is the source language of the library (\n'c'\n by default); this\nis useful if you need to link a static library written in C++ with a program\nwritten in C.\n\n\nYou can also specify \nkind\n to one of \n'any'\n (the default), \n'shared'\n, or\n\n'static'\n. This allows you to restrict the search to find only static versions\nof a library, for example.\n\n\nThis rule recognizes the following environment variables:\n\nLIBRARY_PATH\n.\n\n\n\n\nNote\n\n\nThis only finds the library itself, not any required headers. Those are\nassumed to be somewhere where your compiler can find them automatically; if\nnot, you can set \nCPPFLAGS\n to add the\nappropriate header search path.\n\n\n\n\nMiscellaneous\n\n\nbfg9000_required_version([\nversion\n], [\npython_version\n])\n\n\nSet the required \nversion\n for bfg9000 and/or the required \npython_version\n.\nEach of these is a standard Python \nversion\nspecifier\n.\n\n\nfilter_by_platform(\nname\n, \ntype\n)\n\n\nReturn \nTrue\n if \nname\n is a filename that should be included for the target\nplatform, and \nFalse\n otherwise. File (or directory) names like \nPLATFORM\n or\n\nfoo_PLATFORM.cpp\n are excluded if \nPLATFORM\n is a known platform name that\n\ndoesn't\n match the target platform. Known platform names are: \nposix\n,\n\nlinux\n, \ndarwin\n, \ncygwin\n, \nwindows\n.\n\n\nThis is the default \nfilter\n for\n\nfind_files\n.\n\n\nfind_files([\npath\n], [\nname\n], [\ntype\n], [\nflat\n], [\nfilter\n], [\ncache\n])\n\n\nFind files in \npath\n whose name matches the glob \nname\n. If \npath\n is omitted,\nsearch in the root of the source directory; if \nname\n is omitted, all files will\nmatch. \ntype\n may be either \n'f'\n to find only files or \n'd'\n to find only\ndirectories. If \nflat\n is true, \nfind_files\n will not recurse into\nsubdirectories. You can also specify a custom \nfilter\n function to filter the\nlist of files; this function takes two arguments: the file's name and its type.\n\n\nFinally, if \ncache\n is \nTrue\n (the default), this lookup will be cached so that\nany changes to the result of this function will regenerate the build scripts\nfor the project. This allows you do add or remove source files and not have to\nworry about manually rerunning bfg9000.", 
            "title": "Reference"
        }, 
        {
            "location": "/reference/#reference", 
            "text": "", 
            "title": "Reference"
        }, 
        {
            "location": "/reference/#file-types", 
            "text": "", 
            "title": "File types"
        }, 
        {
            "location": "/reference/#headername", 
            "text": "Create a reference to an existing header named  name . This is useful if you'd\nlike to  install  a single header file for your project.", 
            "title": "header(name)"
        }, 
        {
            "location": "/reference/#header_directorydirectory-system", 
            "text": "Create a reference to a  directory  containing header files for the project.\nThis can then be used in the  include  argument when compiling  a source file. If  system  is True , this directory will be treated as a system directory  for\ncompilers that support this.", 
            "title": "header_directory(directory, [system])"
        }, 
        {
            "location": "/reference/#source_filename-lang", 
            "text": "Create a reference to an existing source file named  name . If  lang  is not\nspecified, the language of the file is inferred from its extension. Generally,\nthis function is only necessary when running commands that take a source file\nas an argument, e.g. running a Python script; this allows you to specify that\nthe file is found in the  source directory . In other cases, a plain string will\nautomatically get converted to a  source_file .", 
            "title": "source_file(name, [lang])"
        }, 
        {
            "location": "/reference/#whole_archivename", 
            "text": "Create a  whole-archive  from an existing static\nlibrary named  name . This ensure that  every  object file in the library is\nincluded, rather than just the ones whose symbols are referenced. This is\ntypically used to turn a static library into a shared library.   Warning  The MSVC linker doesn't have a way of expressing this directive, so whole_archive  can't be used with it.", 
            "title": "whole_archive(name)"
        }, 
        {
            "location": "/reference/#build-steps", 
            "text": "Note  For build steps which produce an actual file, the exact name of the output\nfile is determined by the platform you're running on. For instance, when\nbuilding an executable file named \"foo\" on Windows, the resulting file will\nbe  foo.exe .", 
            "title": "Build steps"
        }, 
        {
            "location": "/reference/#aliasname-deps", 
            "text": "Create a build step named  name  that performs no actions on its own. Instead,\nit just runs its dependencies listed in  deps  as necessary. This build step is\nuseful for grouping common steps together, e.g. the common  make all  command.", 
            "title": "alias(name, [deps])"
        }, 
        {
            "location": "/reference/#commandname-cmdcmds-environment-extra_deps", 
            "text": "Create a build step that runs a list of arbitrary commands, specified in either cmd  or  cmds ;  cmd  takes a single command, whereas  cmds  takes a list of\ncommands. Each command may either be a string to be parsed according to shell\nrules or a list of arguments to be passed directly to the process.  You may also pass a dict to  environment  to set environment variables for the\ncommands. These override any environment variables set on the command line.", 
            "title": "command(name, cmd|cmds, [environment], [extra_deps])"
        }, 
        {
            "location": "/reference/#executablename-files-extra_deps", 
            "text": "Create a build step that builds an executable file named  name .  files  is the\nlist of source (or object) files to link. If an element of  files  is a source\nfile (or a plain string), this function will implicitly call object_file  on it.  The following arguments may also be specified:   include : Forwarded on to  object_file  libs : A list of library files (see  shared_library  and  static_library )  packages : A list of external  packages ; also forwarded on\n  to  object_file  compile_options : Forwarded on to\n   object_file  as  options  link_options : Command-line options to pass to the linker  lang : Forwarded on to  object_file   If  files  isn't specified, this function merely references an  existing \nexecutable file (a precompiled binary, a shell script, etc) somewhere on the\nfilesystem. In this case,  name  is the exact name of the file. This allows\nyou to refer to existing executables for other functions.  This build step recognizes the following environment variables: CC ,  CC_LINK , CXX ,  CXX_LINK , LDFLAGS , LDLIBS .", 
            "title": "executable(name, [files, ..., [extra_deps]])"
        }, 
        {
            "location": "/reference/#object_filename-file-extra_deps", 
            "text": "Create a build step that compiles a source file named  file  to an object file\nnamed  name ; if  name  is not specified, it takes the file name in  file \nwithout the extension.  The following arguments may also be specified:   include : A list of  directories  to search for\n  header files  packages : A list of external  packages  options : Command-line options to pass to the compiler  lang : The language of the source file; useful if the source file's extension\n  isn't recognized by bfg9000   If  file  isn't specified, this function merely references an  existing \nobject file somewhere on the filesystem. In this case,  name  must be specified\nand is the exact name of the file.  This build step recognizes the following environment variables: CC ,  CFLAGS , CPPFLAGS ,  CXX , CXXFLAGS , LDLIBS .", 
            "title": "object_file([name], [file, ..., [extra_deps]])"
        }, 
        {
            "location": "/reference/#object_filesfiles-extra_deps", 
            "text": "Create a compilation build step for each of the files in  files ; this is\nequivalent to calling  object_file  for each\nelement in  files .  In addition,  object_files  returns a special list that allows you to index into\nit using the filename of one of the source files listed in  files . This makes\nit easy to extract a single object file to use in other places, e.g. test code.\nFor example:  objs = object_files(['foo.cpp', 'bar.cpp'])\nrelease_exe = executable('release', objs)\n\nfoo_obj = objs['foo.cpp']\ntest_exe = executable('test', ['test.cpp', foo_obj])", 
            "title": "object_files(files, ..., [extra_deps])"
        }, 
        {
            "location": "/reference/#shared_libraryname-files-extra_deps", 
            "text": "Create a build step that builds a shared library named  name . Its arguments are\nthe same as  executable .  This build step recognizes the following environment variables: CC ,  CC_LINK , CXX ,  CXX_LINK , LDFLAGS , LDLIBS .   Note  On Windows, this produces  two  files:  name.dll  and  name.lib . The latter\nis the  import library , used when linking to this library. As a result, my_lib.all  returns a list containing two files.", 
            "title": "shared_library(name, [files, ..., [extra_deps]])"
        }, 
        {
            "location": "/reference/#static_libraryname-files-extra_deps", 
            "text": "Create a build step that builds a static library named  name . Its arguments are\nthe same as  executable .  This build step recognizes the following environment variables: AR ,  ARFLAGS , CC_LIB , CXX_LIB , LIBFLAGS .", 
            "title": "static_library(name, [files, ..., [extra_deps]])"
        }, 
        {
            "location": "/reference/#grouping-rules", 
            "text": "", 
            "title": "Grouping rules"
        }, 
        {
            "location": "/reference/#default", 
            "text": "Specify a list of build steps that should be run by default when building. These\nare all accumulated into the  all  target.", 
            "title": "default(...)"
        }, 
        {
            "location": "/reference/#install-all", 
            "text": "Specify a list of files that need to be installed for the project to work. Each\nwill be installed to the appropriate location based on its type (e.g. header\nfiles will go in  $PREFIX/include  by default on POSIX systems). These are all\naccumulated into the  install  target.  If  all  is  True , all the files will be installed; otherwise, only the primary\nfile for each argument will be. For instance, on Windows, this means that\nsetting  all  to  True  installs the import libraries as well as the DLLs for\nshared libraries.  This rule recognizes the following environment variables: INSTALL , MKDIR_P , PATCHELF .", 
            "title": "install(..., [all])"
        }, 
        {
            "location": "/reference/#global-options", 
            "text": "", 
            "title": "Global options"
        }, 
        {
            "location": "/reference/#global_optionsoptions-lang", 
            "text": "Specify some  options  (either as a string or list) to use for all compilation\nsteps for the language  lang .", 
            "title": "global_options(options, lang)"
        }, 
        {
            "location": "/reference/#global_link_optionsoptions", 
            "text": "Specify some  options  (either as a string or list) to use for all link steps\n(i.e. for  executables  and shared libraries ).", 
            "title": "global_link_options(options)"
        }, 
        {
            "location": "/reference/#test-rules", 
            "text": "These rules help you define automated tests that can all be run via the  test \ntarget. For simple cases, you should only need the test  rule, but you can also wrap your\ntests with a separate driver using test_driver .  For cases where you only want to  build  the tests, not run them, you can use\nthe  tests  target.", 
            "title": "Test rules"
        }, 
        {
            "location": "/reference/#testtest-options-environmentdriver", 
            "text": "Create a test for a single test file named  test . You may specify additional\ncommand-line arguments to the test in  options . You can also pass temporary\nenvironment variables as a dict via  environment , or specify a test driver to\nadd this test file to via  driver .", 
            "title": "test(test, [options], [environment|driver])"
        }, 
        {
            "location": "/reference/#test_driverdriver-options-environmentparent", 
            "text": "Create a test driver which can run a series of tests, specified as command-line\narguments to the driver. You may specify driver-wide command-line arguments via options . You can also pass temporary environment variables as a dict with environment , or specify a parent test driver to wrap this driver via  driver .", 
            "title": "test_driver(driver, [options], [environment|parent])"
        }, 
        {
            "location": "/reference/#test_deps", 
            "text": "Specify a list of dependencies which must be satisfied before the tests can be\nrun.", 
            "title": "test_deps(...)"
        }, 
        {
            "location": "/reference/#package-finders", 
            "text": "", 
            "title": "Package finders"
        }, 
        {
            "location": "/reference/#boost_packagename-version", 
            "text": "Search for a Boost library. You can specify  name  (as a string or a list) to\nspecify a specific Boost library (or libraries); for instance, 'program_options' . For header-only libraries, you can omit  name .  This rule recognizes the following environment variables: BOOST_ROOT , BOOST_INCLUDEDIR , BOOST_LIBRARYDIR .", 
            "title": "boost_package([name], [version])"
        }, 
        {
            "location": "/reference/#system_executablename", 
            "text": "Search for an executable named  name  somewhere in the system's PATH.  This rule recognizes the following environment variables: PATH ,  PATHEXT .", 
            "title": "system_executable(name)"
        }, 
        {
            "location": "/reference/#system_packagename-lang-kind", 
            "text": "Search for a library named  name  somewhere in the system's default library\nlocation.  lang  is the source language of the library ( 'c'  by default); this\nis useful if you need to link a static library written in C++ with a program\nwritten in C.  You can also specify  kind  to one of  'any'  (the default),  'shared' , or 'static' . This allows you to restrict the search to find only static versions\nof a library, for example.  This rule recognizes the following environment variables: LIBRARY_PATH .   Note  This only finds the library itself, not any required headers. Those are\nassumed to be somewhere where your compiler can find them automatically; if\nnot, you can set  CPPFLAGS  to add the\nappropriate header search path.", 
            "title": "system_package(name, [lang], [kind])"
        }, 
        {
            "location": "/reference/#miscellaneous", 
            "text": "", 
            "title": "Miscellaneous"
        }, 
        {
            "location": "/reference/#bfg9000_required_versionversion-python_version", 
            "text": "Set the required  version  for bfg9000 and/or the required  python_version .\nEach of these is a standard Python  version\nspecifier .", 
            "title": "bfg9000_required_version([version], [python_version])"
        }, 
        {
            "location": "/reference/#filter_by_platformname-type", 
            "text": "Return  True  if  name  is a filename that should be included for the target\nplatform, and  False  otherwise. File (or directory) names like  PLATFORM  or foo_PLATFORM.cpp  are excluded if  PLATFORM  is a known platform name that doesn't  match the target platform. Known platform names are:  posix , linux ,  darwin ,  cygwin ,  windows .  This is the default  filter  for find_files .", 
            "title": "filter_by_platform(name, type)"
        }, 
        {
            "location": "/reference/#find_filespath-name-type-flat-filter-cache", 
            "text": "Find files in  path  whose name matches the glob  name . If  path  is omitted,\nsearch in the root of the source directory; if  name  is omitted, all files will\nmatch.  type  may be either  'f'  to find only files or  'd'  to find only\ndirectories. If  flat  is true,  find_files  will not recurse into\nsubdirectories. You can also specify a custom  filter  function to filter the\nlist of files; this function takes two arguments: the file's name and its type.  Finally, if  cache  is  True  (the default), this lookup will be cached so that\nany changes to the result of this function will regenerate the build scripts\nfor the project. This allows you do add or remove source files and not have to\nworry about manually rerunning bfg9000.", 
            "title": "find_files([path], [name], [type], [flat], [filter], [cache])"
        }, 
        {
            "location": "/environment-vars/", 
            "text": "Environment Variables\n\n\nbfg9000 reads from a number of environment variables. These are the primary way\nin which users can customize parts of a specific build, e.g. by changing the\ntools to use or adding compiler flags. Below is a full list of all the\nenvironment variables bfg9000 recognizes.\n\n\nCompilation variables\n\n\nAR\n\n\nDefault: \nar\n\n\nPOSIX-only\n. The command to use when creating static libraries from object\nfiles.\n\n\nARFLAGS\n\n\nDefault: \ncru\n\n\nPOSIX-only\n. The arguments to pass to the static library builder (typically\n\nar\n).\n\n\nCC\n\n\nDefault: \ncc\n (POSIX), \ncl\n (Windows)\n\n\nThe command to use when compiling C source files. Also the command to use with\ncc-style toolchains when linking object files whose source is in C.\n\n\nCC_LIB\n\n\nDefault: \nlib\n\n\nWindows-only\n. The command to use when creating static libraries whose source\nis in C.\n\n\nCC_LINK\n\n\nDefault: \nlink\n\n\nWindows-only\n. The command to use when linking shared libraries whose source\nis in C.\n\n\nCFLAGS\n\n\nDefault: \nnone\n\n\nCommand line arguments to pass to the compiler when compiling any C source file.\n\n\nCPPFLAGS\n\n\nDefault: \nnone\n\n\n\"C preprocessor flags\"; command line arguments to pass to the compiler when\ncompiling any C-family source file (C, C++, Objective-C, etc).\n\n\nCXX\n\n\nDefault: \nc++\n (POSIX), \ncl\n (Windows)\n\n\nThe command to use when compiling C++ source files. Also the command to use with\ncc-style toolchains when linking object files whose source is in C++.\n\n\nCXX_LIB\n\n\nDefault: \nlib\n\n\nWindows-only\n. The command to use when creating static libraries whose source\nis in C++.\n\n\nCXX_LINK\n\n\nDefault: \nlink\n\n\nWindows-only\n. The command to use when linking shared libraries whose source\nis in C++.\n\n\nCXXFLAGS\n\n\nDefault: \nnone\n\n\nCommand line arguments to pass to the compiler when compiling any C++ source\nfile.\n\n\nLDFLAGS\n\n\nDefault: \nnone\n\n\nCommand line arguments to pass to the linker when linking an executable or\nshared library.\n\n\nLDLIBS\n\n\nDefault: \nnone\n\n\nAdditional libraries to link into an executable or shared library. This is\nmainly useful for cases where a system library (e.g. the C++ Standard Library\nimplementation) requires another library to be explicitly linked with it.\n\n\nLIBFLAGS\n\n\nDefault: \nnone\n\n\nWindows-only\n. Command line arguments to pass to the static library builder\n(typically \nlib\n).\n\n\nCommand variables\n\n\nBFG9000\n\n\nDefault: \n/path/to/bfg9000\n\n\nThe command to use when executing bfg9000 (e.g. when regenerating the build\nscripts because the list of source files has changed). This should only be\nnecessary if you run bfg9000 from a wrapper script.\n\n\nDEPFIXER\n\n\nDefault: \n/path/to/bfg9000-depfixer\n\n\nThe command to use when fixing up depfiles generated by your compiler for the\nMake backend. In general, you shouldn't need to touch this.\n\n\nINSTALL\n\n\nDefault: \ninstall\n\n\nThe command to use when installing files.\n\n\nMKDIR_P\n\n\nDefault: \nmkdir -p\n\n\nThe command to use when making a directory tree. This is used both for\ninstalling whole directories of files and for creating build directories under\nthe Make backend.\n\n\nPATCHELF\n\n\nDefault: \npatchelf\n\n\nLinux-only\n. The command to use when patching an ELF file's rpath for\ninstallation.\n\n\nSETENV\n\n\nDefault: \n/path/to/bfg9000-setenv\n\n\nWindows-only\n. The command to use when setting temporary environment variables,\nsimilar to the POSIX \nenv\n command. This is used when setting environment\nvariables for tests.\n\n\nSystem variables\n\n\nBOOST_ROOT\n\n\nDefault: \nnone\n\n\nThe root directory where Boost headers and libraries are stored (as\n\n$BOOST_ROOT/include\n and \n$BOOST_ROOT/lib\n, respectively).\n\n\nBOOST_INCLUDEDIR\n\n\nDefault: \nnone\n\n\nThe root directory where Boost headers are stored. This takes precedence over\n\nBOOST_ROOT\n.\n\n\nBOOST_LIBRARYDIR\n\n\nDefault: \nnone\n\n\nThe root directory where Boost libraries are stored. This takes precedence over\n\nBOOST_ROOT\n.\n\n\nLIBRARY_PATH\n\n\nDefault: \nnone\n\n\nA list of additional directories to search for\n\nsystem libraries\n. On POSIX systems, this is\ndelimited by \n:\n; on Windows, by \n;\n.\n\n\nPATH\n\n\nDefault: \nnone\n\n\nA list of directories to search for\n\nsystem executables\n. On POSIX systems, this\nis delimited by \n:\n; on Windows, by \n;\n.\n\n\nPATHEXT\n\n\nDefault: \nnone\n\n\nWindows-only\n. A list of valid extensions for executable files under Windows,\nseparated by \n;\n.\n\n\nPLATFORM\n\n\nDefault: \nWin32\n\n\nWindows-only\n. The platform type to use when generating MSBuild files.\n\n\nVISUALSTUDIOVERSION\n\n\nDefault: \n14.0\n\n\nWindows-only\n. The version of Visual Studio to target when generating MSBuild\nfiles.", 
            "title": "Environment Variables"
        }, 
        {
            "location": "/environment-vars/#environment-variables", 
            "text": "bfg9000 reads from a number of environment variables. These are the primary way\nin which users can customize parts of a specific build, e.g. by changing the\ntools to use or adding compiler flags. Below is a full list of all the\nenvironment variables bfg9000 recognizes.", 
            "title": "Environment Variables"
        }, 
        {
            "location": "/environment-vars/#compilation-variables", 
            "text": "", 
            "title": "Compilation variables"
        }, 
        {
            "location": "/environment-vars/#ar", 
            "text": "Default:  ar  POSIX-only . The command to use when creating static libraries from object\nfiles.", 
            "title": "AR"
        }, 
        {
            "location": "/environment-vars/#arflags", 
            "text": "Default:  cru  POSIX-only . The arguments to pass to the static library builder (typically ar ).", 
            "title": "ARFLAGS"
        }, 
        {
            "location": "/environment-vars/#cc", 
            "text": "Default:  cc  (POSIX),  cl  (Windows)  The command to use when compiling C source files. Also the command to use with\ncc-style toolchains when linking object files whose source is in C.", 
            "title": "CC"
        }, 
        {
            "location": "/environment-vars/#cc_lib", 
            "text": "Default:  lib  Windows-only . The command to use when creating static libraries whose source\nis in C.", 
            "title": "CC_LIB"
        }, 
        {
            "location": "/environment-vars/#cc_link", 
            "text": "Default:  link  Windows-only . The command to use when linking shared libraries whose source\nis in C.", 
            "title": "CC_LINK"
        }, 
        {
            "location": "/environment-vars/#cflags", 
            "text": "Default:  none  Command line arguments to pass to the compiler when compiling any C source file.", 
            "title": "CFLAGS"
        }, 
        {
            "location": "/environment-vars/#cppflags", 
            "text": "Default:  none  \"C preprocessor flags\"; command line arguments to pass to the compiler when\ncompiling any C-family source file (C, C++, Objective-C, etc).", 
            "title": "CPPFLAGS"
        }, 
        {
            "location": "/environment-vars/#cxx", 
            "text": "Default:  c++  (POSIX),  cl  (Windows)  The command to use when compiling C++ source files. Also the command to use with\ncc-style toolchains when linking object files whose source is in C++.", 
            "title": "CXX"
        }, 
        {
            "location": "/environment-vars/#cxx_lib", 
            "text": "Default:  lib  Windows-only . The command to use when creating static libraries whose source\nis in C++.", 
            "title": "CXX_LIB"
        }, 
        {
            "location": "/environment-vars/#cxx_link", 
            "text": "Default:  link  Windows-only . The command to use when linking shared libraries whose source\nis in C++.", 
            "title": "CXX_LINK"
        }, 
        {
            "location": "/environment-vars/#cxxflags", 
            "text": "Default:  none  Command line arguments to pass to the compiler when compiling any C++ source\nfile.", 
            "title": "CXXFLAGS"
        }, 
        {
            "location": "/environment-vars/#ldflags", 
            "text": "Default:  none  Command line arguments to pass to the linker when linking an executable or\nshared library.", 
            "title": "LDFLAGS"
        }, 
        {
            "location": "/environment-vars/#ldlibs", 
            "text": "Default:  none  Additional libraries to link into an executable or shared library. This is\nmainly useful for cases where a system library (e.g. the C++ Standard Library\nimplementation) requires another library to be explicitly linked with it.", 
            "title": "LDLIBS"
        }, 
        {
            "location": "/environment-vars/#libflags", 
            "text": "Default:  none  Windows-only . Command line arguments to pass to the static library builder\n(typically  lib ).", 
            "title": "LIBFLAGS"
        }, 
        {
            "location": "/environment-vars/#command-variables", 
            "text": "", 
            "title": "Command variables"
        }, 
        {
            "location": "/environment-vars/#bfg9000", 
            "text": "Default:  /path/to/bfg9000  The command to use when executing bfg9000 (e.g. when regenerating the build\nscripts because the list of source files has changed). This should only be\nnecessary if you run bfg9000 from a wrapper script.", 
            "title": "BFG9000"
        }, 
        {
            "location": "/environment-vars/#depfixer", 
            "text": "Default:  /path/to/bfg9000-depfixer  The command to use when fixing up depfiles generated by your compiler for the\nMake backend. In general, you shouldn't need to touch this.", 
            "title": "DEPFIXER"
        }, 
        {
            "location": "/environment-vars/#install", 
            "text": "Default:  install  The command to use when installing files.", 
            "title": "INSTALL"
        }, 
        {
            "location": "/environment-vars/#mkdir_p", 
            "text": "Default:  mkdir -p  The command to use when making a directory tree. This is used both for\ninstalling whole directories of files and for creating build directories under\nthe Make backend.", 
            "title": "MKDIR_P"
        }, 
        {
            "location": "/environment-vars/#patchelf", 
            "text": "Default:  patchelf  Linux-only . The command to use when patching an ELF file's rpath for\ninstallation.", 
            "title": "PATCHELF"
        }, 
        {
            "location": "/environment-vars/#setenv", 
            "text": "Default:  /path/to/bfg9000-setenv  Windows-only . The command to use when setting temporary environment variables,\nsimilar to the POSIX  env  command. This is used when setting environment\nvariables for tests.", 
            "title": "SETENV"
        }, 
        {
            "location": "/environment-vars/#system-variables", 
            "text": "", 
            "title": "System variables"
        }, 
        {
            "location": "/environment-vars/#boost_root", 
            "text": "Default:  none  The root directory where Boost headers and libraries are stored (as $BOOST_ROOT/include  and  $BOOST_ROOT/lib , respectively).", 
            "title": "BOOST_ROOT"
        }, 
        {
            "location": "/environment-vars/#boost_includedir", 
            "text": "Default:  none  The root directory where Boost headers are stored. This takes precedence over BOOST_ROOT .", 
            "title": "BOOST_INCLUDEDIR"
        }, 
        {
            "location": "/environment-vars/#boost_librarydir", 
            "text": "Default:  none  The root directory where Boost libraries are stored. This takes precedence over BOOST_ROOT .", 
            "title": "BOOST_LIBRARYDIR"
        }, 
        {
            "location": "/environment-vars/#library_path", 
            "text": "Default:  none  A list of additional directories to search for system libraries . On POSIX systems, this is\ndelimited by  : ; on Windows, by  ; .", 
            "title": "LIBRARY_PATH"
        }, 
        {
            "location": "/environment-vars/#path", 
            "text": "Default:  none  A list of directories to search for system executables . On POSIX systems, this\nis delimited by  : ; on Windows, by  ; .", 
            "title": "PATH"
        }, 
        {
            "location": "/environment-vars/#pathext", 
            "text": "Default:  none  Windows-only . A list of valid extensions for executable files under Windows,\nseparated by  ; .", 
            "title": "PATHEXT"
        }, 
        {
            "location": "/environment-vars/#platform", 
            "text": "Default:  Win32  Windows-only . The platform type to use when generating MSBuild files.", 
            "title": "PLATFORM"
        }, 
        {
            "location": "/environment-vars/#visualstudioversion", 
            "text": "Default:  14.0  Windows-only . The version of Visual Studio to target when generating MSBuild\nfiles.", 
            "title": "VISUALSTUDIOVERSION"
        }, 
        {
            "location": "/developer/", 
            "text": "Developer Documentation\n\n\nAt its core, a build file is just a DAG (directed acyclic graph) that gets\nwalked through by the build system, where the nodes are files and the edges are\nbuild steps. A bfg9000 build file is no different.\n\n\nHow a build.bfg file is compiled\n\n\nSnapshot the environment\n\n\nWhen bfg9000 is invoked, it first takes a snapshot of the current environment\n(the operating system, environment variables, compiler to use, etc). This is\nimportant to provide a stable state for regeneration of the build file if\nnecessary (e.g. if build.bfg is changed).\n\n\nBuild an internal dependency graph\n\n\nNext, it executes the build.bfg file. Most bfg9000 functions represent build\nsteps or other related parts of the dependency graph. When called, these build\nup an internal DAG structure with all the backend-agnostic data filled in (e.g.\nvirtual filenames are resolved to real ones, such as \"foo\" to \"libfoo.so\").\n\n\nEmit the final build file\n\n\nOnce this is complete, the DAG is passed to the appropriate backend, which\niterates over all the known edges (build steps) and emits the backend-specific\ncode for them. Since all the backends handle walking the DAG on their own,\nbfg9000 can safely avoid worrying about trying to do this efficiently in Python.", 
            "title": "Developer Guide"
        }, 
        {
            "location": "/developer/#developer-documentation", 
            "text": "At its core, a build file is just a DAG (directed acyclic graph) that gets\nwalked through by the build system, where the nodes are files and the edges are\nbuild steps. A bfg9000 build file is no different.", 
            "title": "Developer Documentation"
        }, 
        {
            "location": "/developer/#how-a-buildbfg-file-is-compiled", 
            "text": "", 
            "title": "How a build.bfg file is compiled"
        }, 
        {
            "location": "/developer/#snapshot-the-environment", 
            "text": "When bfg9000 is invoked, it first takes a snapshot of the current environment\n(the operating system, environment variables, compiler to use, etc). This is\nimportant to provide a stable state for regeneration of the build file if\nnecessary (e.g. if build.bfg is changed).", 
            "title": "Snapshot the environment"
        }, 
        {
            "location": "/developer/#build-an-internal-dependency-graph", 
            "text": "Next, it executes the build.bfg file. Most bfg9000 functions represent build\nsteps or other related parts of the dependency graph. When called, these build\nup an internal DAG structure with all the backend-agnostic data filled in (e.g.\nvirtual filenames are resolved to real ones, such as \"foo\" to \"libfoo.so\").", 
            "title": "Build an internal dependency graph"
        }, 
        {
            "location": "/developer/#emit-the-final-build-file", 
            "text": "Once this is complete, the DAG is passed to the appropriate backend, which\niterates over all the known edges (build steps) and emits the backend-specific\ncode for them. Since all the backends handle walking the DAG on their own,\nbfg9000 can safely avoid worrying about trying to do this efficiently in Python.", 
            "title": "Emit the final build file"
        }, 
        {
            "location": "/license/", 
            "text": "License\n\n\nBSD 3-clause license\n\n\nCopyright (c) 2015, Jim Porter\nAll rights reserved.\n\n\nRedistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:\n\n\n\n\n\n\nRedistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.\n\n\n\n\n\n\nRedistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.\n\n\n\n\n\n\nNeither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.\n\n\n\n\n\n\nTHIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "License"
        }, 
        {
            "location": "/license/#license", 
            "text": "", 
            "title": "License"
        }, 
        {
            "location": "/license/#bsd-3-clause-license", 
            "text": "Copyright (c) 2015, Jim Porter\nAll rights reserved.  Redistribution and use in source and binary forms, with or without modification,\nare permitted provided that the following conditions are met:    Redistributions of source code must retain the above copyright notice, this\nlist of conditions and the following disclaimer.    Redistributions in binary form must reproduce the above copyright notice,\nthis list of conditions and the following disclaimer in the documentation and/or\nother materials provided with the distribution.    Neither the name of the copyright holder nor the names of its contributors\nmay be used to endorse or promote products derived from this software without\nspecific prior written permission.    THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS \"AS IS\" AND\nANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE IMPLIED\nWARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE ARE\nDISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR\nANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES\n(INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES;\nLOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION) HOWEVER CAUSED AND ON\nANY THEORY OF LIABILITY, WHETHER IN CONTRACT, STRICT LIABILITY, OR TORT\n(INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE USE OF THIS\nSOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.", 
            "title": "BSD 3-clause license"
        }
    ]
}